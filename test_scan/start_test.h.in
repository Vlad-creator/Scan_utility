#include <gtest/gtest.h>

#include "../include/includes.hpp"
#include "../include/scan.hpp"
#include "../include/suspicious.hpp"
#include "../include/time.hpp"

using namespace scan;

/*!
 * Cmake defines than became defines with the right way
 * TEST_DIR_PATH_1 - way to "e2e_tests_check_file"
 * TEST_DIR_PATH_2 - way to "e2e_tests_main"
 * TEST_DIR_PATH_2 - way to "e2e_tests_main_result"
 */
#cmakedefine TEST_DIR_PATH_1 "@TEST_DIR_PATH_1@"
#cmakedefine TEST_DIR_PATH_2 "@TEST_DIR_PATH_2@"
#cmakedefine TEST_DIR_PATH_ANSW "@TEST_DIR_PATH_ANSW@"



/*!
 * Test for generation Prefix function
 */
TEST(prefix , test)
{
		std::string per1 = "aabaa";
		std::vector<size_t> res1 = {0 , 1 , 0 , 1 , 2};
		std::vector<size_t>res_per1 = prefix_f(per1);
	EXPECT_EQ (1, res1 == res_per1);

		std::string per2 = "abcabc";
		std::vector<size_t> res2 = {0 , 0 , 0 , 1 , 2 , 3};
		std::vector<size_t>res_per2 = prefix_f(per2);
	EXPECT_EQ (1, res2 == res_per2);

		std::string per3 = "1234567890qwerty";
		std::vector<size_t> res3(per3.length());
		std::vector<size_t>res_per3 = prefix_f(per3);
	EXPECT_EQ (1, res3 == res_per3);

		std::string per4 = "";
		std::vector<size_t> res4(per4.length());
		std::vector<size_t>res_per4 = prefix_f(per4);
	EXPECT_EQ (1, res4 == res_per4);
}

/*!
 * Test for Knuth-Morrisph-Pratt algorithm
 */
TEST(KMP , test)
{
		std::string for_scan1 = "aejhrgsoulvbrwtrtbothelloelsdhvbkst";
		std::string sought1 = "hello";
	EXPECT_EQ(1 , KMP(sought1 , for_scan1));

		std::string for_scan2 = "aejhrgsoulvb#rwtrtb#othelloelsdhvbk#st";
		std::string sought2 = "hello";
	EXPECT_EQ(1 , KMP(sought2 , for_scan2));

		std::string for_scan3 = "aejhrgsoulvbrwtrtbothelloelsdhvbkst";
		std::string sought3 = "false";
	EXPECT_EQ(0 , KMP(sought3 , for_scan3));

		std::string for_scan4 = "aejhrgsoulvbrwtrtbothel  loelsdhvbkst";
		std::string sought4 = "hello";
	EXPECT_EQ(0 , KMP(sought4 , for_scan4));

		std::string for_scan5 = "aejhrgsoulvbrwtrtbot  hello  elsdhvbkst";
		std::string sought5 = "hello";
	EXPECT_EQ(1 , KMP(sought5 , for_scan5));

		std::string for_scan6 = "";
		std::string sought6 = "hello";
	EXPECT_EQ(0 , KMP(sought6 , for_scan6));

		std::string for_scan7 = "hello";
		std::string sought7 = "hello";
	EXPECT_EQ(1 , KMP(sought7 , for_scan7));
}

/*!
 * Test for using Knuth-Morrisph-Pratt algorithm
 * in checking files
 */
TEST(check_file , test)
{
	try
	{
		std::string way_per1{TEST_DIR_PATH_1};
		way_per1 = way_per1 + "/1.txt";
		std::vector<susp::form_susp> errs = susp::fill_susps();
		bool res_per1;
		std::filesystem::path way1(way_per1);
		for (auto it = errs.begin() ; it != errs.end() ; ++it)
		{
			for (auto str = it->susp_strs.begin() ; str != it->susp_strs.end() ; ++str)
			{
				res_per1 = check_file(way1 , (*str));
				if (res_per1 == true)
				{
					break;
				}
			}
			if (res_per1 == true)
						break;
		}
	EXPECT_EQ(1, res_per1);

		bool res_per2;
		std::string way_per2{TEST_DIR_PATH_1};
		way_per2 = way_per2 + "/2.dll";
		std::filesystem::path way2(way_per2);
		for (auto it = errs.begin() ; it != errs.end() ; ++it)
		{
			for (auto str = it->susp_strs.begin() ; str != it->susp_strs.end() ; ++str)
			{
				res_per2 = check_file(way2 , (*str));
				if (res_per2 == true)
					break;
			}
			if (res_per2 == true)
						break;
		}
	EXPECT_EQ(1 , res_per2);

		bool res_per3;
		std::string way_per3{TEST_DIR_PATH_1};
		way_per3 = way_per3 + "/3.dll";
		std::filesystem::path way3(way_per3);
		for (auto it = errs.begin() ; it != errs.end() ; ++it)
		{
			for (auto str = it->susp_strs.begin() ; str != it->susp_strs.end() ; ++str)
			{
				res_per3 = check_file(way3 , (*str));
				if (res_per3 == true)
					break;
			}
			if (res_per3 == true)
						break;
		}
	EXPECT_EQ(0 , res_per3);

		bool res_per4;
		std::string way_per4{TEST_DIR_PATH_1};
		way_per4 = way_per4 + "/4.bat";
		std::filesystem::path way4(way_per4);
		for (auto it = errs.begin() ; it != errs.end() ; ++it)
		{
			for (auto str = it->susp_strs.begin() ; str != it->susp_strs.end() ; ++str)
			{
				res_per4 = check_file(way4 , (*str));
				if (res_per4 == true)
					break;
			}
			if (res_per4 == true)
						break;
		}
	EXPECT_EQ(1 , res_per4);

		bool res_per5;
		std::string way_per5{TEST_DIR_PATH_1};
		way_per5 = way_per5 + "/5.bat";
		std::filesystem::path way5(way_per5);
		for (auto it = errs.begin() ; it != errs.end() ; ++it)
		{
			for (auto str = it->susp_strs.begin() ; str != it->susp_strs.end() ; ++str)
			{
				res_per5 = check_file(way5 , (*str));
				if (res_per5 == true)
							break;
			}
			if (res_per5 == true)
						break;
		}
	EXPECT_EQ(1 , res_per5);

		bool res_per6;
		std::string way_per6{TEST_DIR_PATH_1};
		way_per6 = way_per6 + "/6.js";
		std::filesystem::path way6(way_per6);
		for (auto it = errs.begin() ; it != errs.end() ; ++it)
		{
			for (auto str = it->susp_strs.begin() ; str != it->susp_strs.end() ; ++str)
			{
				res_per6 = check_file(way6 , (*str));
				if (res_per6 == true)
					break;
			}
			if (res_per6 == true)
						break;
		}
	EXPECT_EQ(0 , res_per6);

		bool res_per7;
		std::string way_per7{TEST_DIR_PATH_1};
		way_per7 = way_per7 + "/7.js";
		std::filesystem::path way7(way_per7);
		for (auto it = errs.begin() ; it != errs.end() ; ++it)
		{
			for (auto str = it->susp_strs.begin() ; str != it->susp_strs.end() ; ++str)
			{
				res_per7 = check_file(way7 , (*str));
				if (res_per7 == true)
					break;
			}
			if (res_per7 == true)
						break;
		}
	EXPECT_EQ(1 , res_per7);
	}
	catch (std::exception const& e)
	{
		std::cout << e.what() << std::endl;
	}
}

/*!
 * Tests for main function
 * that scanning the directory
 */
TEST (main , test_1)
{
	std::vector<susp::form_susp> errs = susp::fill_susps();
	try
	{
		bool res = 1;
		std::string way_per1{TEST_DIR_PATH_2};
		std::string way_answ1{TEST_DIR_PATH_ANSW};
		std::string way_answ_per1{TEST_DIR_PATH_ANSW};

		way_per1 = way_per1 + "/test_1";
		way_answ1 = way_answ1 + "/test_answer1";
		way_answ1 = way_answ_per1 + "/answer";

		std::filesystem::path way1(way_per1);
		scan::scan test(way_per1 , errs);
		test.scanning();

		std::ofstream off(way_answ_per1);

		int ch_per;
		int ch_answ;
    	if (off.is_open())
    	{
    		off << test.result.files;
    		off << test.result.susps["JS"];
    		off << test.result.susps["CMD"];
    		off << test.result.susps["EXE"];
    		off << test.result.errors;
    	}
        off.close();

        std::ifstream off1(way_answ_per1);
        std::ifstream answ(way_answ1);
        if (off1.is_open() && answ.is_open())
        while (off1 >> ch_per)
        {
        	answ >> ch_answ;
        	if (ch_answ != ch_per)
        	{
        		res = false;
        		break;
        	}
        }
    	EXPECT_EQ(1 , res);
	}
	catch (std::exception const& e)
	{
		std::cout << e.what() << std::endl;
	}
}


TEST(main , test_2)
{
	std::vector<susp::form_susp> errs = susp::fill_susps();
	try
	{
		bool res = 1;
		std::string way_per{TEST_DIR_PATH_2};
		std::string way_answ{TEST_DIR_PATH_ANSW};
		std::string way_answ_per{TEST_DIR_PATH_ANSW};

		way_per = way_per + "/test_2";
		way_answ = way_answ + "/test_answer2";
		way_answ = way_answ_per + "/answer";

		std::filesystem::path way(way_per);
		scan::scan test(way_per , errs);
		test.scanning();

		std::ofstream off(way_answ_per);

		int ch_per;
		int ch_answ;
    	if (off.is_open())
    	{
    		off << test.result.files;
    		off << test.result.susps["JS"];
    		off << test.result.susps["CMD"];
    		off << test.result.susps["EXE"];
    		off << test.result.errors;
    	}
        off.close();

        std::ifstream off1(way_answ_per);
        std::ifstream answ(way_answ);
        if (off1.is_open() && answ.is_open())
        while (off1 >> ch_per)
        {
        	answ >> ch_answ;
        	if (ch_answ != ch_per)
        	{
        		res = false;
        		break;
        	}
        }
    	EXPECT_EQ(1 , res);
	}
	catch (std::exception const& e)
	{
		std::cout << e.what() << std::endl;
	}
}

TEST(main , test_3)
{
	std::vector<susp::form_susp> errs = susp::fill_susps();
	try
	{
		bool res = 1;
		std::string way_per{TEST_DIR_PATH_2};
		std::string way_answ{TEST_DIR_PATH_ANSW};
		std::string way_answ_per{TEST_DIR_PATH_ANSW};

		way_per = way_per + "/test_3";
		way_answ = way_answ + "/test_answer3";
		way_answ = way_answ_per + "/answer";

		std::filesystem::path way(way_per);
		scan::scan test(way_per , errs);
		test.scanning();

		std::ofstream off(way_answ_per);

		int ch_per;
		int ch_answ;
    	if (off.is_open())
    	{
    		off << test.result.files;
    		off << test.result.susps["JS"];
    		off << test.result.susps["CMD"];
    		off << test.result.susps["EXE"];
    		off << test.result.errors;
    	}
        off.close();

        std::ifstream off1(way_answ_per);
        std::ifstream answ(way_answ);
        if (off1.is_open() && answ.is_open())
        while (off1 >> ch_per)
        {
        	answ >> ch_answ;
        	if (ch_answ != ch_per)
        	{
        		res = false;
        		break;
        	}
        }
    	EXPECT_EQ(1 , res);
	}
	catch (std::exception const& e)
	{
		std::cout << e.what() << std::endl;
	}
}